@implements IDisposable;

<div class="pie-chart-container">
    <div class="row pie-chart" id="totalExpense">
        <div class="col-xs-12 col-sm-12 col-md-12">
            <div class="pane col-xs-12 col-sm-12 col-md-12 pie-container">
                <div class="pieChartHeader">
                    <p class="chart-title">Candle Chart</p>
                </div>
                <div>
                    <div class="candleChart">
                        @if (Render)
                        {
                            <SfChart Title="AAPL Historical">
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
                                    <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="Volume" ValueType="Syncfusion.Blazor.Charts.ValueType.Logarithmic" OpposedPosition="true" Interval="20" LabelFormat="n0">
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                </ChartPrimaryYAxis>
                                <ChartAxes>
                                    <ChartAxis Name="secondary" OpposedPosition="true" RowIndex="1" LabelFormat="n0" Title="Price" RangePadding="ChartRangePadding.Additional" PlotOffset="30">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                                    </ChartAxis>
                                </ChartAxes>
                                <ChartRows>
                                    <ChartRow Height="30%"></ChartRow>
                                    <ChartRow Height="70%"></ChartRow>
                                </ChartRows>
                                <ChartLegendSettings Visible="false"></ChartLegendSettings>
                                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
                                    <ChartCrosshairLine Width="1"></ChartCrosshairLine>
                                </ChartCrosshairSettings>
                                <ChartSeriesCollection>
                                    <ChartSeries Type="ChartSeriesType.Column" DataSource="@ChartPoints" Name="Volume" XName="Period" YName="Volume">
                                    </ChartSeries>
                                    <ChartSeries DataSource="@ChartPoints" YAxisName="secondary" Name="Apple Inc" XName="Date" High="High" Volume="Volume" Low="Low" Open="Open" Close="Close"
                                                 BearFillColor="#2ecd71" BullFillColor="#e74c3d" Type="ChartSeriesType.Candle">
                                    </ChartSeries>
                                </ChartSeriesCollection>
                            </SfChart>
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@*@code{
    [CascadingParameter]
    public TradingDataService TradingDataService { get; set; }
    [Parameter]
    public bool Render { get; set; } = true;
    private List<CandleData> ChartPoints { get; set; } = new List<CandleData>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var candle = new CandleData
        {
            Date = new DateTime(2020, 01, 01, 0, 0, 0),
            Close = 10,
            Open = 5,
            High = 11,
            Low = 4,
            Volume = 30
        };
        for (int i = 0; i < 100; i++)
        {
            ChartPoints.Add(new CandleData
            {
                Date = candle.Date.AddMinutes(i),
                Close = candle.Close + i,
                Open = candle.Open + i,
                High = candle.High + i,
                Low = candle.Low + i,
                Volume = candle.Volume
            }); ;

        }


        UpdatePieChart();
    }

    /// <summary>
    /// Calculate the total expense and update the pie chart
    /// </summary>
    public void RefreshPieChart()
    {
        UpdatePieChart();
    }

    private void UpdatePieChart()
    {
        return;
    }



    public void Dispose()
    {

    }

    public class CandleData
    {
        public DateTime Date { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Open { get; set; }
        public double Close { get; set; }
        public double Volume { get; set; }
    }
}*@

<style>
    .chartLegend .e-grid {
        border: none !important;
        box-shadow: none !important;
        min-width: 250px;
    }

    .e-grid tr.e-row {
        height: 30px;
    }
</style>