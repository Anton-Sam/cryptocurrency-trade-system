@page "/"

@implements IDisposable;

@if (ShowSpinner)
{
    <div class="sb-content-overlay">
        <div class="sb-loading">
            <svg class="circular" height="40" width="40">
                <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
            </svg>
        </div>
    </div>
    <style>
        #main-page {
            pointer-events: none;
            cursor: auto;
        }
    </style>
}

<div class="control-section dashboard-page">
    <div>
        <ResultCards @ref="cardsRef"></ResultCards>
    </div>
    <CandleChart @ref="candleChartRef" Render="@Render"></CandleChart>
    <div>
        <div>
            <div class="line-chart-area">
                <BalanceChart @ref="balanceChartRef" Render="@Render" LineChartData="@lineChartData"></BalanceChart>
            </div>
            <div class="column-chart-area">
                <OrdersChart @ref="ordersChartRef"></OrdersChart>
            </div>
        </div>
        <OrdersGrid></OrdersGrid>
    </div>
</div>

@code{
    [CascadingParameter]
    private TradingDataService TradingDataService { get; set; }

    private ResultCards cardsRef;
    private CandleChart candleChartRef;
    private BalanceChart balanceChartRef;
    private OrdersChart ordersChartRef;

    private List<BalanceChange> lineChartData = new List<BalanceChange>
{
        new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,1,1),
            Balance=1000
        },
        new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,2,1),
            Balance=1100
        },new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,3,1),
            Balance=1200
        },
        new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,4,1),
            Balance=980
        }

    };

    private bool ShowSpinner = true;
    private bool Render;
    private DateTime minDate = new DateTime(2019, 06, 01, 00, 00, 00);
    private DateTime maxDate = new DateTime(2019, 11, 30, 23, 59, 59);
    private DateTime lastMonthStart = new DateTime(2019, 10, 01, 00, 00, 00);
    private DateTime lastMonthEnd = new DateTime(2019, 10, 31, 23, 59, 59);
    private DateTime last3MonthStart = new DateTime(2019, 09, 01, 00, 00, 00);
    private DateTime last3MonthEnd = new DateTime(2019, 11, 30, 23, 59, 59);
    private DateTime allTimeStart = new DateTime(2019, 06, 01, 00, 00, 00);
    private DateTime allTimeEnd = new DateTime(2019, 11, 30, 23, 58, 58);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        InitializeData();
        ShowSpinner = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            await InvokeAsync(async () =>
            {
                await Task.Delay(1);
                Render = true;
                this.UpdateChartData();
                StateHasChanged();
            });
        }
    }

    private void InitializeData()
    {

    }

    private void UpdateChartData()
    {

    }



    private async Task OnDateRangeChange(RangePickerEventArgs<DateTime> args)
    {

    }

    public void Dispose()
    {

    }


}

<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .sidebar-Rightpane {
        padding-bottom: 18px;
        margin-right: -2px;
    }
</style>