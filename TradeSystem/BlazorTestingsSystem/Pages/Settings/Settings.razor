@page "/settings"
@using AutoMapper;
@inject IMapper Mapper;
@*@inherits OwningComponentBase*@
<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }

    @@media (min-width: 1100px) {
        .rightpane {
            margin-right: 270px;
        }
    }

    @@media (max-width: 1100px) {
        .rightpane {
            margin-right: 0px;
        }
    }

    @@media (min-width: 768px) {
        .content .content-wrapper {
            padding: 0;
        }
    }

    @@media (max-width: 768px) {
        .content .content-wrapper {
            padding: 0 8px 8px 8px;
            margin-top: 7rem;
        }
    }

    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }
</style>

<div class="expense-page content">
    <div class='exp-content-container'>

        <div class="settings-container">
            <div class="col-xs-12 col-sm-6 col-lg-3 col-md-6 margin-top settings-tb-container pane">
                <EditForm Model="@_settingsDetails" OnValidSubmit="@StartTest">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <SfDropDownList Placeholder="Strategy" TValue="string" TItem="string" @bind-Value="@_settingsDetails.StrategyName" DataSource="@_service.StrategiesDict.Keys" FloatLabelType="FloatLabelType.Auto">
                            <DropDownListFieldSettings Value="Strategy"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <ValidationMessage For="@(() => _settingsDetails.CandleInterval)"></ValidationMessage>
                    </div>
                    <div class="form-row">
                        <SfDropDownList Placeholder="Symbol" TValue="string" TItem="string" @bind-Value="@_settingsDetails.Symbol" DataSource="@_service.Symbols" FloatLabelType="FloatLabelType.Auto">
                            <DropDownListFieldSettings Value="Symbol"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <ValidationMessage For="@(() => _settingsDetails.CandleInterval)"></ValidationMessage>
                    </div>
                    <div class="form-row">
                        <SfDropDownList Placeholder="Candle interval" TValue="CandleInterval?" TItem="Interval" @bind-Value="@_settingsDetails.CandleInterval" DataSource="@_service.Intervals" FloatLabelType="FloatLabelType.Auto">
                            <DropDownListFieldSettings Value="CandleInterval"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <ValidationMessage For="@(() => _settingsDetails.CandleInterval)"></ValidationMessage>
                    </div>
                    <div class="form-row">
                        <SfNumericTextBox @bind-Value="@_settingsDetails.HistoryRange" Placeholder="History range" TValue="int?" FloatLabelType="FloatLabelType.Auto" Min="0"></SfNumericTextBox>
                        <ValidationMessage For="@(() => _settingsDetails.HistoryRange)"></ValidationMessage>
                    </div>
                    <div class="form-row">
                        <SfNumericTextBox @bind-Value="@_settingsDetails.StartBalance" Placeholder="Start balance" TValue="double?" FloatLabelType="FloatLabelType.Auto" Min="0"></SfNumericTextBox>
                        <ValidationMessage For="@(() => _settingsDetails.StartBalance)"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>

@code
{
    SettingsDetails _settingsDetails = new SettingsDetails();
    SettingsDataService _service = new SettingsDataService();

    //[Inject]
    //private  IMapper mapper;

    //protected override void OnInitialized()
    //{
    //    _settingsDetails = new SettingsDetails();
    //    //_intervals = GetEnumDisplayNames<CandleInterval>();

    //}

    public Settings()
    {
        var a = 1;
    }

    public void StartTest()
    {
        var strategy = _service.StrategiesDict[_settingsDetails.StrategyName];
        var symbol = _settingsDetails.Symbol;
        var candleInterval = (StrategyTester.Enums.CandleInterval)Enum.Parse(typeof(StrategyTester.Enums.CandleInterval), _settingsDetails.CandleInterval.Value.ToString());
        var historyRange = _settingsDetails.HistoryRange.Value;
        var startBalance = (decimal)_settingsDetails.StartBalance.Value;
        var result = strategy.StartTest(symbol, candleInterval, historyRange, startBalance);
        var candles=Mapper.Map<IEnumerable<Candle>>(result.HistoryData);
       

    }
}

}
