@page "/"

@implements IDisposable;


<div class="control-section dashboard-page">
    <div>
        <ResultCards @ref="cardsRef"></ResultCards>
    </div>
    <CandleChart @ref="candleChartRef" ></CandleChart>
    <div>
        <div>
            <div class="line-chart-area">
                <BalanceChart @ref="balanceChartRef" LineChartData="@lineChartData"></BalanceChart>
            </div>
            <div class="column-chart-area">
                <OrdersChart @ref="ordersChartRef"></OrdersChart>
            </div>
        </div>
        <OrdersGrid></OrdersGrid>
    </div>
</div>

@code{
    [CascadingParameter]
    private TradingDataService TradingDataService { get; set; }

    private ResultCards cardsRef;
    private CandleChart candleChartRef;
    private BalanceChart balanceChartRef;
    private OrdersChart ordersChartRef;

    private List<BalanceChange> lineChartData = new List<BalanceChange>
{
        new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,1,1),
            Balance=1000
        },
        new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,2,1),
            Balance=1100
        },new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,3,1),
            Balance=1200
        },
        new BalanceChange
        {
            Date=new DateTime(2000,1,1,1,4,1),
            Balance=980
        }

    };



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        InitializeData();
      
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            await InvokeAsync(async () =>
            {
                await Task.Delay(1);
                this.UpdateChartData();
                StateHasChanged();
            });
        }
    }

    private void InitializeData()
    {

    }

    private void UpdateChartData()
    {

    }



    private async Task OnDateRangeChange(RangePickerEventArgs<DateTime> args)
    {

    }

    public void Dispose()
    {

    }


}

<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .sidebar-Rightpane {
        padding-bottom: 18px;
        margin-right: -2px;
    }
</style>