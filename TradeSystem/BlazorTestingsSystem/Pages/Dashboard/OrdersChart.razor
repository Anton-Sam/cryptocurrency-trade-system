@using BlazorTestingsSystem.Enums

<div class="col-xs-12 col-sm-6 col-md-6 chart-container">
    <div class="chart-padding">
        <div class="column-chart">
            <SfChart Title="Orders - Count">
                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                <ChartPrimaryXAxis TickPosition="AxisPosition.Inside" LabelPosition="AxisPosition.Inside" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisLabelStyle Color="#ffffff"></ChartAxisLabelStyle>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis Minimum="0" Maximum="300" Interval="50">
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                </ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@chartPoints" XName="Name" YName="Count" Type="ChartSeriesType.Column">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                            </ChartDataLabel>
                        </ChartMarker>
                        <ChartCornerRadius BottomLeft="10" BottomRight="10" TopLeft="10" TopRight="10"></ChartCornerRadius>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>
</div>

@code{
    [CascadingParameter]
    private TradeResultDataService TradeResultDataService { get; set; }

    private List<RoundedColumnChartData> chartPoints { get; set; } = new List<RoundedColumnChartData>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UpdateChart();
    }

    private void UpdateChart()
    {
        if (TradeResultDataService.Orders is null)
            return;
        var cancelOrdersCount = TradeResultDataService.Orders.Where(o => o.Status == OrderStatus.Canceled).Count();
        var buyFilledOrdersCount = TradeResultDataService.Orders.Where(o => o.Status == OrderStatus.Filled && o.Side == OrderSide.Buy).Count();
        var sellFilledOrdersCount = TradeResultDataService.Orders.Where(o => o.Status == OrderStatus.Filled && o.Side == OrderSide.Sell).Count();
        chartPoints.Add(new RoundedColumnChartData { Name = "Buy", Count = buyFilledOrdersCount });
        chartPoints.Add(new RoundedColumnChartData { Name = "Sell", Count = sellFilledOrdersCount });
        chartPoints.Add(new RoundedColumnChartData { Name = "Cancel", Count = cancelOrdersCount });
    }

    public class RoundedColumnChartData
    {
        public string Name { get; set; }
        public double Count { get; set; }
    }
}
