@using BlazorTestingsSystem.Enums

<div class="row recent-expense-grid">
    <div class="col-xs-6 col-sm-6 col-md-12" style="width:100%">

        <SfGrid SelectedRowIndex=2 DataSource="@ordersData" Height="800px">
            <GridTemplates>
                <ToolbarTemplate>
                    <SfToolbar>
                        <ToolbarItems>
                            <ToolbarItem Text="Recent Transactions"></ToolbarItem>
                        </ToolbarItems>
                    </SfToolbar>
                </ToolbarTemplate>
            </GridTemplates>
            @*<GridEvents RowSelected="RowSelecthandler" TValue="OrderData"></GridEvents>*@
        <GridColumns>
            <GridColumn Field=@nameof(OrderData.Id) HeaderText="Id" Width="110"> </GridColumn>
            <GridColumn Field=@nameof(OrderData.ClinetOrderId) HeaderText="Client order Id" Width="110"></GridColumn>
            <GridColumn Field=@nameof(OrderData.Side) HeaderText="Order side" Width="110"></GridColumn>
            <GridColumn Field=@nameof(OrderData.Type) HeaderText="Order type" Width="110"></GridColumn>
            <GridColumn Field=@nameof(OrderData.Price) HeaderText="Price" Width="110"></GridColumn>
            <GridColumn Field=@nameof(OrderData.Quantity) HeaderText="Quantity" Width="110"></GridColumn>
            <GridColumn Field=@nameof(OrderData.CreateTime) HeaderText="Create time" Width="110"></GridColumn>
        </GridColumns>
        </SfGrid>
    </div>
</div>
@*<div class="row recent-expense-grid margin-top-10">
    <div class="col-xs-6 col-sm-6 col-md-12" style="width:100%">
        <SfGrid DataSource="@GridData" Query="@(new Query().Where("EmployeeID", "equal", RowIndex))">
            <GridColumns>
                <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" Width="110"> </GridColumn>
                <GridColumn Field=@nameof(Order.ShipName) HeaderText="Ship Name" Width="110"></GridColumn>
                <GridColumn Field=@nameof(Order.ShipCountry) HeaderText="Ship Country" Width="110"></GridColumn>
                <GridColumn Field=@nameof(Order.ShipAddress) HeaderText="Ship Address" Width="110"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>*@



<style>
    .e-statustext,
    .e-mastertext {
        font-size: 15px;
        font-family: Roboto;
        opacity: 0.87;
        padding: 1em;
    }
</style>
@code{



    [CascadingParameter]
    private TradeResultDataService TradeResultDataService { get; set; }

    private List<OrderData> ordersData;
    private List<OrderDetails> orderDetails;

    public IEnumerable<Order> GridData { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UpdateGrid();
    }



    public class OrderData
    {
        public string Id { get; set; }
        public string ClinetOrderId { get; set; }
        public OrderSide Side { get; set; }
        public OrderType Type { get; set; }
        public decimal Price { get; set; }
        public decimal Quantity { get; set; }
        public DateTime CreateTime { get; set; }
    }
    public class OrderDetails
    {
        public string Id { get; set; }
        public OrderStatus Status { get; set; }
        public DateTime UpdateTime { get; set; }
    }

    private void UpdateGrid()
    {
        if (TradeResultDataService.Orders is null)
            return;
        ordersData = new List<OrderData>();
        orderDetails = new List<OrderDetails>();
        var groups = TradeResultDataService.Orders.GroupBy(o => o.Id);
        foreach (var gr in groups)
        {
            var firstOrder = gr.First();
            ordersData.Add(new OrderData
            {
                Id=gr.Key,
                ClinetOrderId=firstOrder.ClientOrderId,
                Side=firstOrder.Side,
                Type=firstOrder.Type,
                Price=firstOrder.Price,
                Quantity=firstOrder.Quantity,
                CreateTime=firstOrder.CreateTime
            });
            orderDetails.AddRange(gr.Select(o =>
            new OrderDetails
            {
                Id = gr.Key,
                Status = o.Status,
                UpdateTime = o.UpdateTime
            }));
        }
    }
}
