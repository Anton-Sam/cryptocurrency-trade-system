<div class="col-xs-12 col-sm-6 col-md-6 chart-container">
    <div class="chart-padding">
        <div class="line-chart">
            <SfChart UseGroupingSeparator="true">
                <ChartMargin Top="90"></ChartMargin>
                <ChartArea>
                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                </ChartArea>
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
                    @*LabelFormat="yyyy-MM-dd HH:mm"*@
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis LabelFormat="c0" Maximum="@maxValue" Minimum="@minValue" Interval="@interval"></ChartPrimaryYAxis>
                <ChartAnnotations>
                    <ChartAnnotation X="@chartXAnnoation" Y="9%" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                        <ContentTemplate>
                            <p style="font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;">Account - Balance</p>
                        </ContentTemplate>
                    </ChartAnnotation>
                </ChartAnnotations>
                <ChartSeriesCollection>
                    <ChartSeries  XName="Date" Width="2" YName="Amount" Name="Amount" DataSource="@balances">
                        @*<ChartSeriesBorder Width="0.5" Color="#0470D8"></ChartSeriesBorder>
                        <ChartMarker Visible="true" Width="10" Height="10" Fill="white">
                            <ChartMarkerBorder Width="2" Color="#0470D8"></ChartMarkerBorder>
                        </ChartMarker>*@
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Fill="#707070" Enable="true" Format="${series.name} : ${point.y}" Header="${point.x} "></ChartTooltipSettings>
                <ChartLegendSettings Visible="true"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private TradeResultDataService TradeResultDataService { get; set; }

    private IEnumerable<Balance> balances;
    private double maxValue;
    private double minValue;
    private double interval;

    //[Parameter]
    //public bool Render { get; set; }
    private string chartXAnnoation = "75px";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UpdateChart();
    }

    private void UpdateChart()
    {
        balances = TradeResultDataService.Balances;
        if (balances is null)
            return;
        var values = balances.Select(a => a.Amount);
        maxValue = values.Max();
        minValue = values.Min();
        interval = (maxValue - minValue) / 10;


    }

    //public async Task Refresh(List<BalanceChange> lineChartData)
    //{
    //    LineChartData = lineChartData;
    //    await InvokeAsync(async () =>
    //    {
    //        await Task.Delay(1);
    //        chartRef?.RefreshLiveData();
    //    });
    //}
}